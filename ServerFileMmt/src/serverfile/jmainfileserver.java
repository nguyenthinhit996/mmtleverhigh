package serverfile;

import comon.FileDowInfo;
import comon.FileInfo;
import java.awt.Color;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.Socket;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import org.apache.commons.lang3.StringUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author peter
 */
public class jmainfileserver extends javax.swing.JFrame {

    //client check connect
    ArrayList clientOutputStreams;

    //servermaster
    ObjectOutputStream ObjectOutputStreamServerMaster;

    boolean isConnect = false;

    // get folder
    JFileChooser chooser;

    // Object FileInfo is information send to server master then servermater send to client
    FileInfo fileinfo = new FileInfo();
    // luu ipclient vs file name down
    Map<IpclientVsNameFile, DatagramSocket> mapIpclientVsNameFile = new HashMap<>();

    /**
     * Creates new form jmainserver
     */
    public jmainfileserver() {

        initComponents();
        error.setVisible(false);
        txt_ipserver.setText("");
        txt_port.setText("");
        ipfileserver.setText(getIP());
        // random 5000 5999
        lab_port.setText(getPort());
        txt_ipserver.setText(getIP());
        txt_port.setText("2222");
        lab_path.setText("No Selection");
        DefaultListModel model = new DefaultListModel();
        model.clear();
        list_file.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ipfileserver = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btn_connection = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_port = new javax.swing.JTextField();
        txt_ipserver = new javax.swing.JTextField();
        error = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_file = new javax.swing.JList<>();
        brower = new javax.swing.JButton();
        lab_path = new javax.swing.JLabel();
        lab_port = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("File server");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(119, 194, 218));
        jPanel1.setPreferredSize(new java.awt.Dimension(550, 500));

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel1.setText("My IP:");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 20)); // NOI18N
        jLabel2.setText("Input information of server master");

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel3.setText("IP :");

        ipfileserver.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        ipfileserver.setText("localhost");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel6.setText("The files are available");

        btn_connection.setBackground(new java.awt.Color(83, 136, 53));
        btn_connection.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        btn_connection.setText("Connect ");
        btn_connection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_connectionActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 20)); // NOI18N
        jLabel4.setText("Information of File Server");

        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel5.setText("Port:");

        txt_port.setText("2222");

        txt_ipserver.setText("192.168.000.0");

        error.setBackground(new java.awt.Color(59, 52, 51));
        error.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        error.setForeground(new java.awt.Color(171, 22, 22));
        error.setText("Connect error ");

        list_file.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(list_file);

        brower.setBackground(new java.awt.Color(181, 171, 57));
        brower.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        brower.setText("Brower");
        brower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browerActionPerformed(evt);
            }
        });

        lab_path.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        lab_path.setText("D:/abc/cbf/");

        lab_port.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        lab_port.setText("localhost");

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel7.setText("Port:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(125, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_connection, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ipfileserver)
                                .addGap(108, 108, 108)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lab_port))
                            .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_ipserver, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addGap(6, 6, 6))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lab_path, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(brower, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_port, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ipfileserver, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(lab_port, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brower)
                    .addComponent(lab_path))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(error)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(txt_ipserver, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_port, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_connection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_connectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_connectionActionPerformed
        // TODO add your handling code here:
        // kiem tra set thu muc chua
        if (fileinfo.getLsName() == null || fileinfo.getLsName().isEmpty()) {
            error.setText("No Selection");
            error.setForeground(Color.red);
            error.setVisible(true);
        } else {
            if (!isConnect) {
                if (StringUtils.isEmpty(lab_path.getText())
                        || StringUtils.isEmpty(txt_ipserver.getText())
                        || StringUtils.isEmpty(txt_port.getText())) {
                    error.setText("Connect Error");
                    error.setForeground(Color.red);
                    error.setVisible(true);
                } else {
                    error.setVisible(false);
                    // conenct servermaster
                    Thread serverStart = new Thread(new ServerStart());
                    serverStart.start();
                    fileinfo.setIpServerFile(ipfileserver.getText());
                    fileinfo.toString();
                }
            } else {
                error.setText("Connect is exit");
                error.setForeground(Color.GREEN);
                error.setVisible(true);
            }
        }

        // vua nhan dc vua gui dc
        ArrayList clientOutputStreams = new ArrayList();

    }//GEN-LAST:event_btn_connectionActionPerformed

    private void browerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browerActionPerformed
        // TODO add your handling code here:
        if (fileinfo.getLsName() != null) {
            return;
        }
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Chon Thu Muc");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): "
                    + chooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : "
                    + chooser.getSelectedFile());
            lab_path.setText(chooser.getSelectedFile().toString());
            FilenameFilter filter = new FilenameFilter() {
                @Override
                public boolean accept(File dir, String name) {
                    if (name.endsWith(".zip") || name.endsWith(".rar")) {
                        return true;
                    }
                    return false;
                }
            };

            String[] listF = chooser.getSelectedFile().list(filter);
            if (listF.length != 0) {
                fileinfo.setDestinationDirectory(chooser.getSelectedFile().toString());
                fileinfo.setLsName(Arrays.asList(listF));
                fileinfo.setPortServerFile(Integer.valueOf(lab_port.getText()));
                DefaultListModel model = new DefaultListModel();
                for (String i : listF) {
                    model.addElement(i);
                }
                list_file.setModel(model);
            } else {
                lab_path.setText("No File avaliable in this folder");
                isConnect = false;
            }

        } else {
            System.out.println("No Selection ");
            lab_path.setText("No Selection");
            isConnect = false;
        }
    }//GEN-LAST:event_browerActionPerformed


    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        // gui gat ket noi server master
        if (ObjectOutputStreamServerMaster != null) {
            // xoa object nay ben server master
            fileinfo.setStatus(0);
            try {
                ObjectOutputStreamServerMaster.reset();
                ObjectOutputStreamServerMaster.writeObject(fileinfo);
            } catch (IOException ex) {
                Logger.getLogger(jmainfileserver.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jmainfileserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jmainfileserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jmainfileserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jmainfileserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jmainfileserver().setVisible(true);
            }
        });
    }

    String getIP() {
        Enumeration e;
        try {
            e = NetworkInterface.getNetworkInterfaces();
            while (e.hasMoreElements()) {
                NetworkInterface n = (NetworkInterface) e.nextElement();
                Enumeration ee = n.getInetAddresses();
                while (ee.hasMoreElements()) {
                    InetAddress i = (InetAddress) ee.nextElement();

                    if (i.isSiteLocalAddress()) {
                        System.out.println("i.isSiteLocalAddress()" + i.getHostAddress());
                        return i.getHostAddress();
                    }
                }
            }

        } catch (SocketException ex) {

        }
        return "localhost";
    }

    // random port 5000 5999
    String getPort() {
        Random rand = new Random();
        int random = rand.nextInt((5999 - 5000) + 1) + 5000;
        return String.valueOf(random);
    }

    // thread start server
    public class ServerStart implements Runnable {

        @Override
        public void run() {
            Socket sock;
            try {
                // ket noi voi Servermaster
                sock = new Socket(txt_ipserver.getText().toString(), Integer.valueOf(txt_port.getText()));
                PrintWriter outServerMasterStream = new PrintWriter(sock.getOutputStream());
                // gui thong bao den servermaster la file server
                outServerMasterStream.println("serverfile");
                outServerMasterStream.flush();

                // gui thong tin file den servermaster
                fileinfo.setStatus(1);
                ObjectOutputStreamServerMaster = new ObjectOutputStream(sock.getOutputStream());
                ObjectOutputStreamServerMaster.writeObject(fileinfo);
                ObjectOutputStreamServerMaster.flush();

                // thread lang nghe ket noi tu server cho truong hop ngat ket noi
                Thread serverMasterHandler = new Thread(new ServerMasterHandler(sock));
                serverMasterHandler.start();
                isConnect = true;
                error.setText("Connect success ");
                error.setVisible(true);
                error.setForeground(Color.GREEN);
                System.out.println("Ok ket noi thanh cong");

//                // ket noi UDP vs client
                DatagramSocket serverSocket = new DatagramSocket(Integer.valueOf(lab_port.getText()));
                Thread abc = new Thread(new Send_Receive_File(serverSocket));
                abc.start();

            } catch (Exception ex) {
                Logger.getLogger(jmainfileserver.class.getName()).log(Level.SEVERE, null, ex);
                error.setText("Connect Error");
                error.setForeground(Color.red);
                error.setVisible(true);
                Thread.currentThread().interrupt();
                isConnect = false;
                mapIpclientVsNameFile.clear();
            }
        }
    }

    // thread send file to client
    class Send_Receive_File implements Runnable {

        // 50 byte for moi lan send file
        private static final int PIECES_OF_FILE_SIZE = 1024 * 60;
        private DatagramSocket ServerSocket;

        public Send_Receive_File(DatagramSocket ServerSocket) {
            this.ServerSocket = ServerSocket;
        }

        @Override
        public void run() {
            try {
                // tao goi de nhan
                byte[] receiveData = new byte[PIECES_OF_FILE_SIZE];
                DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);

                while (true) {

                    // tao ra DatagramSocket moi cho moi client
                    DatagramSocket socForClient;
                    int portGen;
                    while (true) {
                        getServerSocket().receive(receivePacket);
                        ByteArrayInputStream byteinfoclient = new ByteArrayInputStream(
                                receivePacket.getData());
                        ObjectInputStream ois = new ObjectInputStream(byteinfoclient);
                        String clientInfor = ois.readUTF();
                        String[] slp = clientInfor.split("\\|");
                        System.out.println("nhan " + clientInfor);
                        try {
                            if (!IscheckExistPort(Integer.valueOf(slp[1]))) {
                                socForClient = new DatagramSocket(Integer.valueOf(slp[1]));
                                portGen = Integer.valueOf(slp[1]);
                                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                                ObjectOutputStream oos;
                                oos = new ObjectOutputStream(baos);
                                System.out.println("Gui Ok");
                                oos.writeUTF("ok");
                                oos.flush();
                                DatagramPacket sendPacket = new DatagramPacket(baos.toByteArray(),
                                        baos.toByteArray().length, receivePacket.getAddress(), Integer.valueOf(lab_port.getText()));
                                getServerSocket().send(sendPacket);
                                oos.reset();
                                break;
                            } else {
                                socForClient = new DatagramSocket(Integer.valueOf(slp[1]));
                                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                                ObjectOutputStream oos;
                                oos = new ObjectOutputStream(baos);
                                System.out.println("Trung port");
                                oos.writeUTF("no");
                                oos.reset();
                                DatagramPacket sendPacket = new DatagramPacket(baos.toByteArray(),
                                        baos.toByteArray().length, receivePacket.getAddress(), Integer.valueOf(lab_port.getText()));
                                getServerSocket().send(sendPacket);
                            }
                        } catch (IOException e) {
                            // bao loi cho client 
                            ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            ObjectOutputStream oos;
                            oos = new ObjectOutputStream(baos);
                            oos.writeUTF("no");
                            System.out.println("Gui no Exception");
                            oos.reset();
                            DatagramPacket sendPacket = new DatagramPacket(baos.toByteArray(),
                                    baos.toByteArray().length, receivePacket.getAddress(), Integer.valueOf(lab_port.getText()));
                            getServerSocket().send(sendPacket);
                        }
                    }
                    // nhan du lieu
                    socForClient.receive(receivePacket);
                    InetAddress ipClientFile = receivePacket.getAddress();
                    ByteArrayInputStream bais = new ByteArrayInputStream(
                            receivePacket.getData());
                    ObjectInputStream ois = new ObjectInputStream(bais);
                    FileDowInfo filedownreceive = (FileDowInfo) ois.readObject();

                    System.out.println("--------- get file cho ip ---------");
                    System.out.println(ipClientFile.toString() + "/" + portGen);
                    System.out.println(filedownreceive.getNameFile());
                    IpclientVsNameFile fi = new IpclientVsNameFile(portGen,
                            receivePacket.getAddress(), filedownreceive.getNameFile());

                    // moi ipclient and file name download is thread
                    int flag = 0;
                    for (Map.Entry<IpclientVsNameFile, DatagramSocket> i : mapIpclientVsNameFile.entrySet()) {
                        if (i.getKey().getIpclient().equals(fi.getIpclient())
                                && i.getKey().getNameFileDownload().equals(fi.getNameFileDownload())) {
                            flag = 1;
                            break;
                        }
                    }
                    // ko co IpclientVsNameFile
                    if (flag == 0) {
                        mapIpclientVsNameFile.put(fi, socForClient);
                        // thread down for client + this file.
                        Thread newThread = new Thread(
                                new ThreadSendPacketFile(socForClient, filedownreceive, ipClientFile, fi)
                        );
                        newThread.start();
                    } else {
                        //
                        System.out.println("dang down load " + fi.getIpclient() + " file: " + fi.getNameFileDownload());
                    }
                }

            } catch (Exception ex) {
                Logger.getLogger(jmainfileserver.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        /**
         * @return the ServerSocket
         */
        public DatagramSocket getServerSocket() {
            return ServerSocket;
        }

        /**
         * @param ServerSocket the ServerSocket to set
         */
        public void setServerSocket(DatagramSocket ServerSocket) {
            this.ServerSocket = ServerSocket;
        }

        boolean IscheckExistPort(int port) {
            for (Map.Entry<IpclientVsNameFile, DatagramSocket> i : mapIpclientVsNameFile.entrySet()) {
                if (i.getKey().getPort() == port) {
                    return true;
                }
            }
            return false;
        }

    }

    // thread send packet file
    class ThreadSendPacketFile implements Runnable {

        private static final int PIECES_OF_FILE_SIZE = 1024 * 60;
        private DatagramSocket socForClient;
        private FileDowInfo filedownreceive;
        private InetAddress ipClientFile;
        private IpclientVsNameFile sipfiname;

        public ThreadSendPacketFile(DatagramSocket socForClient, FileDowInfo filedownreceive, InetAddress ipClientFile, IpclientVsNameFile sipfiname) {
            this.socForClient = socForClient;
            this.filedownreceive = filedownreceive;
            this.ipClientFile = ipClientFile;
            this.sipfiname = sipfiname;
        }

        @Override
        public void run() {
            byte[] receiveData = new byte[PIECES_OF_FILE_SIZE];
            try {
                // get info file
                File fileSend = new File(lab_path.getText() + File.separatorChar + getFiledownreceive().getNameFile());
                InputStream inputStream;
                inputStream = new FileInputStream(fileSend);
                BufferedInputStream bis = new BufferedInputStream(inputStream);

                long fileLength = fileSend.length();
                int piecesOfFile = (int) (fileLength / PIECES_OF_FILE_SIZE);
                int lastByteLength = (int) (fileLength % PIECES_OF_FILE_SIZE);

                if (lastByteLength > 0) {
                    piecesOfFile++;
                }
                getFiledownreceive().setSoluonggoi(piecesOfFile);
                getFiledownreceive().setGoicuoicung(lastByteLength);

                // gui thong tin file cho client
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ObjectOutputStream oos;
                oos = new ObjectOutputStream(baos);
                oos.writeObject(getFiledownreceive());
                oos.reset();
                DatagramPacket sendPacket = new DatagramPacket(baos.toByteArray(),
                        baos.toByteArray().length, getIpClientFile(), sipfiname.getPort());
                socForClient.send(sendPacket);
                System.out.println("--------- get info max file cho ip ---------" + getFiledownreceive().getSoluonggoi());

                // gui tat ca cac goi trong file
                Map<Integer, byte[]> mapByte = new HashMap<>();
                int i = 1;
                while (bis.read(receiveData, 0, PIECES_OF_FILE_SIZE) > 0) {
                    FileDowInfo filedow = new FileDowInfo();
                    filedow.setIpServerFile(ipfileserver.getText());
                    filedow.setPortServer(sipfiname.getPort());
                    filedow.setNameFile(getFiledownreceive().getNameFile());
                    filedow.setSogoithu(i);
                    filedow.setSoluonggoi(piecesOfFile);
                    // gui thong tin den file server de down
                    if (i == piecesOfFile) { // gui xong
                        filedow.setStatus(3);
                    } else {
                        filedow.setStatus(2);
                    }
                    filedow.setDatafile(receiveData);
                    filedow.setGoicuoicung(lastByteLength);

                    ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
                    ObjectOutputStream oos2 = new ObjectOutputStream(baos2);
                    oos2.writeObject(filedow);
                    oos2.reset();
                    DatagramPacket sendPacket2 = new DatagramPacket(baos2.toByteArray(),
                            baos2.toByteArray().length, getIpClientFile(), sipfiname.getPort());
                    socForClient.send(sendPacket2);
                    mapByte.put(i, receiveData);
                    i++;
                    receiveData = new byte[PIECES_OF_FILE_SIZE];
                    System.out.println("---packe : " + i);
                    Thread.sleep(50);
                }
                // gui them 5 file cuoi de trang mat goi tin
                for (int i2 = 0; i2 < 5; i2++) {
                    FileDowInfo filedow = new FileDowInfo();
                    filedow.setIpServerFile(ipfileserver.getText());
                    filedow.setPortServer(sipfiname.getPort());
                    filedow.setNameFile(getFiledownreceive().getNameFile());
                    filedow.setSogoithu(mapByte.size());
                    filedow.setGoicuoicung(lastByteLength);
                    filedow.setStatus(3);
                    filedow.setDatafile(mapByte.get(mapByte.size()));
                    ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
                    ObjectOutputStream oos2 = new ObjectOutputStream(baos2);
                    oos2.writeObject(filedow);
                    oos2.reset();
                    DatagramPacket sendPacket2 = new DatagramPacket(baos2.toByteArray(),
                            baos2.toByteArray().length, getIpClientFile(), sipfiname.getPort());
                    socForClient.send(sendPacket2);
                    System.out.println("Gui " + i2 + " file cuoi " + getFiledownreceive().getNameFile() + " goi " + mapByte.size());
                    Thread.sleep(100);
                }

                System.out.println("Gui xong lan chinh ");
                // check and kiem tra goi co bi thieu hay khong.
                CheckAndsendFileLost(lastByteLength, mapByte, socForClient, sipfiname.getPort());
                // mapIpclientVsNameFile.remove(getSipfiname());
                for (Map.Entry<IpclientVsNameFile, DatagramSocket> ii : mapIpclientVsNameFile.entrySet()) {
                    if (ii.getKey().getIpclient().equals(getSipfiname().getIpclient())
                            && ii.getKey().getNameFileDownload().equals(getSipfiname().getNameFileDownload())) {
                        mapIpclientVsNameFile.remove(ii.getKey());
                        break;
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(jmainfileserver.class.getName()).log(Level.SEVERE, null, ex);
                // xoa no di
                for (Map.Entry<IpclientVsNameFile, DatagramSocket> ii : mapIpclientVsNameFile.entrySet()) {
                    if (ii.getKey().getIpclient().equals(getSipfiname().getIpclient())
                            && ii.getKey().getNameFileDownload().equals(getSipfiname().getNameFileDownload())) {
                        mapIpclientVsNameFile.remove(ii.getKey());
                        break;
                    }
                }
            }
        }

        void CheckAndsendFileLost(int goicuoi, Map<Integer, byte[]> mapByte, DatagramSocket socForClient, int port) {
            try {

                int lan = 2;
                byte[] receiveData = new byte[PIECES_OF_FILE_SIZE];

                while (true) {
                    System.out.println("------------ send lan -----------" + lan);
                    lan++;
                    // gui packet thieu
                    receiveData = new byte[PIECES_OF_FILE_SIZE];
                    DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
                    socForClient.receive(receivePacket);
                    ByteArrayInputStream bais = new ByteArrayInputStream(
                            receivePacket.getData());
                    ObjectInputStream ois = new ObjectInputStream(bais);
                    String a = ois.readUTF();
                    System.out.println("nhan tu client " + a);
                    if (a.equals("ok")) {
                        System.out.print("send thanh cong roi");
                        break;
                    }
                    // gui lai packet vs so luong la a.
                    String[] sp = a.split("\\,");
                    System.out.println("nhan send to " + sp.length);
                    String cuoi = "";
                    for (String sp1 : sp) {
                        cuoi = sp1;
                        FileDowInfo filedow = new FileDowInfo();
                        filedow.setIpServerFile(ipfileserver.getText());
                        filedow.setPortServer(port);
                        filedow.setNameFile(getFiledownreceive().getNameFile());
                        filedow.setSogoithu(Integer.valueOf(sp1));
                        filedow.setGoicuoicung(goicuoi);
                        filedow.setDatafile(mapByte.get(Integer.valueOf(sp1)));
                        ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
                        ObjectOutputStream oos2 = new ObjectOutputStream(baos2);
                        oos2.writeObject(filedow);
                        oos2.reset();
                        DatagramPacket sendPacket2 = new DatagramPacket(baos2.toByteArray(),
                                baos2.toByteArray().length, getIpClientFile(), port);
                        socForClient.send(sendPacket2);
                        System.out.println("Gui file " + getFiledownreceive().getNameFile() + " goi " + Integer.valueOf(sp1));
                        Thread.sleep(50);
                    }

                    for (int i2 = 0; i2 < 5; i2++) {
                        FileDowInfo filedow = new FileDowInfo();
                        filedow.setIpServerFile(ipfileserver.getText());
                        filedow.setPortServer(sipfiname.getPort());
                        filedow.setNameFile(getFiledownreceive().getNameFile());
                        filedow.setSogoithu(Integer.valueOf(cuoi));
                        filedow.setStatus(3);
                        filedow.setGoicuoicung(goicuoi);
                        filedow.setDatafile(mapByte.get(Integer.valueOf(cuoi)));
                        ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
                        ObjectOutputStream oos2 = new ObjectOutputStream(baos2);
                        oos2.writeObject(filedow);
                        oos2.reset();
                        DatagramPacket sendPacket2 = new DatagramPacket(baos2.toByteArray(),
                                baos2.toByteArray().length, getIpClientFile(), sipfiname.getPort());
                        socForClient.send(sendPacket2);
                        System.out.println("Gui " + i2 + " file cuoi " + getFiledownreceive().getNameFile() + " goi " + Integer.valueOf(cuoi));
                        Thread.sleep(100);
                    }
                }

            } catch (Exception e) {
                System.out.print("Error");
                for (Map.Entry<IpclientVsNameFile, DatagramSocket> ii : mapIpclientVsNameFile.entrySet()) {
                    if (ii.getKey().getIpclient().equals(getSipfiname().getIpclient())
                            && ii.getKey().getNameFileDownload().equals(getSipfiname().getNameFileDownload())) {
                        mapIpclientVsNameFile.remove(ii.getKey());
                        break;
                    }
                }
            }
        }

        /**
         * @return the socForClient
         */
        public DatagramSocket getSocForClient() {
            return socForClient;
        }

        /**
         * @param socForClient the socForClient to set
         */
        public void setSocForClient(DatagramSocket socForClient) {
            this.socForClient = socForClient;
        }

        /**
         * @return the filedownreceive
         */
        public FileDowInfo getFiledownreceive() {
            return filedownreceive;
        }

        /**
         * @param filedownreceive the filedownreceive to set
         */
        public void setFiledownreceive(FileDowInfo filedownreceive) {
            this.filedownreceive = filedownreceive;
        }

        /**
         * @return the ipClientFile
         */
        public InetAddress getIpClientFile() {
            return ipClientFile;
        }

        /**
         * @param ipClientFile the ipClientFile to set
         */
        public void setIpClientFile(InetAddress ipClientFile) {
            this.ipClientFile = ipClientFile;
        }

        /**
         * @return the sipfiname
         */
        public IpclientVsNameFile getSipfiname() {
            return sipfiname;
        }

        /**
         * @param sipfiname the sipfiname to set
         */
        public void setSipfiname(IpclientVsNameFile sipfiname) {
            this.sipfiname = sipfiname;
        }

    }

    // class luu ipclient va ten file can download
    class IpclientVsNameFile {

        private int port;
        private InetAddress ipclient;
        private String nameFileDownload;

        public IpclientVsNameFile(int port, InetAddress ipclient, String nameFileDownload) {
            this.port = port;
            this.ipclient = ipclient;
            this.nameFileDownload = nameFileDownload;
        }

        /**
         * @return the port
         */
        public int getPort() {
            return port;
        }

        /**
         * @param port the port to set
         */
        public void setPort(int port) {
            this.port = port;
        }

        /**
         * @return the ipclient
         */
        public InetAddress getIpclient() {
            return ipclient;
        }

        /**
         * @param ipclient the ipclient to set
         */
        public void setIpclient(InetAddress ipclient) {
            this.ipclient = ipclient;
        }

        /**
         * @return the nameFileDownload
         */
        public String getNameFileDownload() {
            return nameFileDownload;
        }

        /**
         * @param nameFileDownload the nameFileDownload to set
         */
        public void setNameFileDownload(String nameFileDownload) {
            this.nameFileDownload = nameFileDownload;
        }

    }

    // ServerMasterHandler
    public class ServerMasterHandler implements Runnable {

        BufferedReader inFileServer;
        Socket sockFileServer;

        public ServerMasterHandler(Socket Socket) {
            try {
                sockFileServer = Socket;
                InputStreamReader isReader = new InputStreamReader(sockFileServer.getInputStream());
                inFileServer = new BufferedReader(isReader);
            } catch (Exception ex) {
                error.setText("Error connect with server");
                error.setVisible(true);
                error.setForeground(Color.red);
                Thread.currentThread().interrupt();
                isConnect = false;
            }

        }

        @Override
        public void run() {
            String message;
            String[] data;

            try {
                while ((message = inFileServer.readLine()) != null) {
                    if (message.equals("exitservermaster")) {
                        error.setText("Error connect with server");
                        error.setVisible(true);
                        error.setForeground(Color.red);
                        isConnect = false;
                        Thread.currentThread().interrupt();

                    }
                }
            } catch (Exception ex) {
                error.setText("Error connect with server");
                error.setVisible(true);
                error.setForeground(Color.red);
                ex.printStackTrace();
                isConnect = false;
                Thread.currentThread().interrupt();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton brower;
    private javax.swing.JButton btn_connection;
    private javax.swing.JLabel error;
    private javax.swing.JLabel ipfileserver;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lab_path;
    private javax.swing.JLabel lab_port;
    private javax.swing.JList<String> list_file;
    private javax.swing.JTextField txt_ipserver;
    private javax.swing.JTextField txt_port;
    // End of variables declaration//GEN-END:variables
}
